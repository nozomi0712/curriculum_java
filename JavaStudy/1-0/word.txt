■ IT
IT
　-> インフォメーション テクノロジー
　-> コンピュータとネットワークを利用した技術の総称
ICT
　-> インフォメーション コミュニケーション テクノロジー
　-> ITの技術を使用し、”人とインターネット”または”人と人”が繋がる技術のこと
IoT
　-> インターネット オブ シングス
　-> 人を使わず、モノが自動的にインターネットと繋がる技術

■ OS
OS
　-> オペレーティング システム
　-> アプリやデバイス等を動作させるための基本となるソフトウェア
Windows
　-> マイクロソフト社が開発したOS
macOS (Mac OS X)
　-> アップル社が開発したOS
　-> GUIを採用した元祖と言われている
UNIX
　-> AT&T社が開発した無料のOS
　-> 大学や教育機関、政府・官公庁をはじめとし、現在多くのサーバに使用されている
　-> 様々な派生OSが生まれており、世界中の愛好者から支持されている
Linux
　-> UNIXから派生したOS(もちろん無料)
　-> 無料である事、余計な機能が無い分処理が高速であることから、サーバー分野で活躍している
　-> AndroidOSもLinuxがベースとなっている。

■ 言語・環境
マークアップ／フロントエンド
HTML
　-> ハイパーテキスト マークアップ ランゲージ
　-> Webページを作成する上で最も基本的なマークアップ言語の一つ
　※　マークアップ言語とは、プログラム言語にあらず、Webサイトのコンテンツに構造を指定するためのコード 
CSS
　-> カスケーディング スタイル シート
　-> Webページのスタイルを指定するための言語。
　-> HTML等で作成されるWebページにスタイルを適用する際に使用される。
JavaScript
　-> オブジェクト指向のスクリプト言語
　-> 主にWebブラウザ上でページに動きを付けたり、情報を処理する事が可能（DOM操作）
　-> サーバーサイドの操作も可能

サーバーサイド
.NET（C#, VB）
　-> .NET    ->「.NET Framework」の略、ライブラリやデータベース技術がまとまったもの。
               マイクロソフト社で開発されたもの（当時は別の目的があったが…）であり、基本的にWindowsでのみ使用可能
　-> C#.NET　->C#を使ったマイクロソフトのコンパイラ言語
　-> VB.NET　->Visual Basicを使ったマイクロソフトのコンパイラ言語
Java
　-> オブジェクト指向のコンパイラ言語
　-> コンパイラ言語であることから、処理速度が早い
　-> OSに関係なく、Windows, iOS, Linuxで動作させることができる
Java SE
　-> Java Platform, Standard Edition の略 
　-> JavaのAPI（ライブラリ）の一つ
　-> Javaを用いて開発するにあたり、基礎となる標準的な機能をまとめたもの
Java EE（Jakarta EE）
　-> Java 2 Platform, Enterprise Editionの略
　-> JavaのAPI（ライブラリ）の一つ
　-> Jakarta EE は Java EEの後継であるもの
　-> 前述のJava SEに企業用途のサーバー用の機能が追加されたもの
Perl
　-> 手続き指向のスクリプト言語
　-> 元々、CGIを実現するための言語として生まれ、テキスト処理やファイル処理に重点をいていた
　-> テキスト処理が得意であり、値や文字列の自動変換・正規表現が得意
　-> Ruby等の他のスクリプト言語より高速
PHP
　-> 手続き指向・オブジェクト指向のスクリプト言語
　-> Personal Home Pageの略であり、ホームページを便利に作るために生まれた
　-> 基本理念は「簡単」「Web」
Ruby
　-> オブジェクト指向のスクリプト言語
　-> チームでの開発スピードが早く、開発コストを落とす事が可能
　-> 実は、Perlが担っていた高度な文字列操作などもRubyでも行うことが可能
　-> 開発者は日本人
　-> 基本理念は「ストレスなくプログラミングを楽しむこと」

■ サーバーソフト
Apache
　-> オープンソースソフトウェア(OSS)で、無償で誰でも利用可能
　-> CMSを動かすためのPHPやデータベースと連携がしやすい
　-> LinuxだけでなくWindowsなど複数のサーバーOS上で利用可能
nginx
　-> シェアはApacheに次いで２位
　-> 高速かつ大量処理が得意（処理速度が安定し、ダウンしにくい）-> Apacheより強い
　-> 大量の動的コンテンツには向かない（大規模でなければ関係ないが…） -> Apacheの方が強い
　※　ApavheとNginxは処理の仕組みは異なるが、出来ることはほぼ同じ。日本語でも情報はApacheの方が多い。
IIS
　-> マイクロソフト社が提供するWindows向けののWebサーバーソフト
　-> オープンソースソフトウェア(OSS)で、無償で誰でも利用可能
　-> Windows開発ではシェアが１位であり、視覚的操作が可能であることから、難易度も比較的低い

■ SQL
SQL
　-> リレーショナルデータベースを操作するために必要となる世界的標準言語
　※　リレーショナルデータベースとは、データを表形式（テーブル）で表し、リレーションシップ（関連付け）を結ぶことができる仕組み
　　　他には”ツリー（階層）型”や”ネットワーク型”が存在するが、現在ではほぼ全てのサービスがリレーションデータベースを採用している。
Oracle DB
　-> 3大DBの１つ（有料である）
　-> 行レベルのロックが可能でる（ロックできる行数に制限が無い）
　-> 誰かが更新中・読込中であっても現時点で確定されているデータを返す
　　（”読み取り一貫性”にロールバックセグメントの採用）
Dｂ2
　-> 3大DBの１つ（有料である）
　-> 1インスタンスに複数のデータベースを作成できるため、スキーマ（構造）単位で環境を分散できる。
　　　（Oracleに比べてより自由度のあるデータベース環境の分散が実現可能）
　-> 誰かが更新中は基本的にデータを取り出すことができない
　　（”読み取り一貫性”にロッキング・メカニズムの採用）
SQL Server
　-> 3大DBの１つ（有料である）
　-> Windows環境においてのみ稼働
　-> DB2同様に1インスタンスに複数のデータベースを作成できるため、スキーマ（構造）単位で環境を分散できる。
　　（Oracleに比べてより自由度のあるデータベース環境の分散が実現可能）
　-> インスタンスを作成時、実メモリの最大値を指定するだけで、各メモリプール等の大きさは基本的にはSQL Serverが自動調整する
　　（Oracleに比べて浅い知識でも、導入までの時間がかからない）
　-> バックアップのスケジュールを組まないとトランザクションログが永遠に増え続ける
MySQL
　-> オープンソースで基本的に無料
　-> 行レベルのロックが可能
　-> コストベースオプティマイザ（構造等の最適化）はOracle DBほど優秀では無い
　-> 大量の情報を高速処理でき、非常に人気だが、Oracle DBのような有料ソフトと比較すると機能面、性能面で劣る
Maria DB
　-> MySQLから派生したRDBMS
　-> MySQLと比較し、セキュリティ面・頑健性・パフォーマンスが向上
　-> MySQLと比較し、拡張性・処理性能・品質が向上
　-> MySQLとの高い互換性（インストール方法やディレクトリ構造がほぼ同じ）、移行もスムーズ
　-> 国内では導入しているレンタルサーバーが少ない
PostgreSQL
　-> オープンソースで基本的に無料
　-> DDL操作（ALTER TABLE等）が基本的に不可能
　-> MySQLと比較、大量ソートの処理が早い
　-> MySQLはシンプルな機能の処理が得意、PostgreSQLは多機能
SQLite
　-> ロックする範囲をデータベース全体でしか制御できない（同時に複数人が使用するサービスに不向き）
　-> 軽量コンパクトなリレーショナルデータベースシステムで、主に「組み込み用途」等に使用される
    （スマートフォンやゲーム機等に採用される）
CRUD
　-> Create（登録）、Read（参照）、Update（更新）、Delete（削除）機能をまとめた表現
トランザクション
　-> 1つ以上のSQL文を含む作業単位
コミット
　-> トランザクションによるデータベースの更新内容が有効になること
ロールバック
　-> トランザクションによる更新内容が無効になることをロールバック
排他制御（排他ロック）
　-> あるユーザが更新中のデータに対し、別のユーザの更新を防ぐためのロック
　-> RDBMSのレベルとして、”表” ->”ページ” ->”行”とある
　-> ロックの単位が大きいほど、関係のないデータまでロックされ、ロック解除待ちが多発し、処理効率の低下を招く
楽観ロック
　-> 更新対象のデータが、データの取得時点から更新されていないことを確認したうえで更新することでデータの整合性を保証する
　-> 排他ロックはアプリケーション等に依存
　-> 更新頻度が低い、同時更新される可能性が低い場合に適している
悲観ロック
　-> 更新対象のデータを取得時点から明示的にロックしてから更新する（＝他トランザクションによる更新を防ぐ）ことでデータの整合性を保証する
　-> DBMSで排他ロックを行う
　-> トランザクションが短い、更新頻度が高い、同時更新されることが多い場合に適している
実行計画
　-> オプティマイザは複数のアクセス経路、インデックスの有無、データの分散や偏り等を考慮し、コスト評価した上で実行計画を作成する
　※　オプティマイザが実行計画を作成するうえで、「RDBMSの情報やインデックスの情報が格納されたもの」が必要となる
　　 これのことを、カタログマネージャ（統計情報）と呼ぶ
チューニング
　-> 性能の悪いSQLを発見し、その処理過程を改善すること
　-> 統計情報の変動幅が大きかったりすると、正確な実行計画が作成されないことがある（そもそも統計情報が間違っている場合もある）
　　　そのような場合には能動的にアプローチをかけていく必要がある
　-> （手順例）パフォーマンスの測定　>>ボトルネックの洗い出し（スループット？レスポンシブタイム？）　>>コストに見合ったメリットがあるか
パフォーマンス
　-> スループット・・単位時間あたりの処理能力（並列処理ができる件数が多いほど高い）
　-> レスポンシブタイム（レイテンシー）・・処理を実行してから結果が帰ってくるまでの時間
　-> スケーラビリティ・・データベースをはじめとするサービスのパフォーマンスは必ずハードウェアのスペックに依存する
スロークエリ
　-> 実行が遅いクエリ（SQL処理）
　-> クエリ自体を書き直したり（チューニングしたり）、インデックスを貼る等して改善させる
クエリログ
　-> SQLサーバーへの接続・接続解除の情報、およびクライアントから実行されたクエリを出力してくれるログ
IDE（統合開発環境）
　-> エディタ、コンパイラ、デバッガなどのが含まれる開発環境（Visual Studio等）
　-> Javaであれば「Eclipse」、PHPであれば「PHPStorm」、Rubyであれば「RubyMine」等、言語によって適したIDEが存在する
Eclipse
　-> Java用に作成された統合環境
　-> 現在では、「C言語・C++」、「PHP」、「python」など様々な言語に対応している
NetBeans
　-> Javaをはじめとした複数の言語に対応した統合開発環境
　-> Javaを開発しているサン・マイクロシステムズ（今はオラクル）が開発していることから、最新版のJavaに対応可能
　-> Eclipseの方が広く使われおり、比較されることが多い（シェア、多機能性、プラグインの多さは負けている）
SpringToolSuite
　-> JavaのフレームワークSpringの開発元が提供している
　-> Eclipseをベースに作られている
　-> Apache Mavenを利用して、プロジェクトを生成する
DBツール
　-> データベース管理システム (DBMS) や関係データベース管理システム (RDBMS) 上のデータを扱うためのツール
　-> GUIでわかりやすくDB操作が可能
A5:SQL Mk-2
　-> Windows環境においてのみ使用可能なDB管理ツール
　-> SQLの実行や、テーブル編集、ストアプロシージャの実行、ER図の作成　等が可能
　※　ストアプロシージャ・・・データベースに対する連続した複数の処理を一つのプログラムにまとめ、データと共に保存できるようにしたもの
pgAdmin
　-> PostgreSQLのDB管理ツールであり、GUI管理ツールとしての一通りの機能を備えている
DBeaver
　-> 様々なDBMS、OSに対応しているDB管理ツール
　-> UIがEclipseと同じ
　-> 機能が豊富であり、多言語対応である
　-> ビーバーがかわいいのもポイントのひとつ
MySQL Workbench
　-> MySQLのDB管理ツールであり、ER図の作成も可能であり、データベース作成にも便利
Sequel Pro
　-> MySQLのDB管理ツールであり、直感的に使用でき、他の有料ソフトウェアと同等の機能を有しているが無料で使える（とのこと）
　-> アイコンがカッコよく、一目惚れした
TeamSQL
　-> 2019年2月末、TeamSQLがサービス終了しました。。

■ 肩書
PM
　-> プロジェクトマネージャー
　-> メンバーの選定・管理、顧客折衝、案件受注、案件定義、品質管理、進捗状況管理、コスト管理　等を行う
　-> システム開発に関わる一連の業務に精通している必要がある
PL
　-> プロジェクトリーダー
　-> 中規模〜大規模の開発でPMの目が配りきれない場合立てる
　-> 品質管理やチーム内での情報伝達、メンバー管理が主な仕事でコミュニケーション力が高い必要がある
SE
　-> システムエンジニア
　-> PMが作成した工程表に沿って、自分の担当業務をこなす
　-> 要件の確定や仕様の検討など、主に上流工程を担当するが、SEがPGの役割を同時にこなすこともよくある
PG（PE）
　-> プログラマー
　-> SEの手足となって、SEが用意した仕様書をもとにプログラミング・単体テストをするのが主な作業
デザイナー
　-> Webサイト等の大まかなレイアウトを決める
　-> 「Illustrator」や「Photoshop」などのグラフィックソフトを用いて、Webサイトの配色やロゴ・アイコンの配置などを決める
　-> HTML、CSS、JavaScriptを使用してフロントエンドのコーディングを行う
エンジニア
　-> システムの設計・開発・運用・保守を行う
フロントエンド・エンジニア
　-> WebサービスやWebアプリケーションで直接ユーザーの目に触れる部分を担当するエンジニア
　-> 使用する言語は主に、HTMLやCSS、JavaScript
サーバーサイド・エンジニア
　-> Webサーバー側やデータベースのシステムなど、ユーザーの目に見えない部分を担当するエンジニア
　-> 使用する言語は主に、JavaやJavaScript、PHP、Python、Ruby　等
　-> インフラ、セキュリティーなどの知識を習得することで、さらに価値を高められる
バックエンド・エンジニア
　-> サーバーサイド・エンジニアと同義で使われることが多い
　-> 強いて言えば、WEB系企業ではバックエンド、基幹系企業ではサーバーサイドと呼ばれることが多いようだ

■ UI（ユーザーインターフェース）
UI
　-> コンピュータを扱うときに利用者が情報を受け取ったり入力したりするための仕組み
CUI
　-> キャラクター ユーザー インターフェース
　-> キーボード入力のみでコンピュータを操作するUIの仕組み
GUI
　-> グラフィカル ユーザー インターフェース
　-> ディスプレイ上のカーソルをマウスで動かし、適宜文字入力をするという操作方法

■ ファイル／ディレクトリ
ファイル
　-> パソコンでデータを扱うときの基本単位
　-> ファイルには、ファイル名とファイルの種類を表す拡張子が付く
　-> 文字・数字・画像・サウンド・プログラム等パソコンで扱える全てのデータはファイルとして記憶可能
拡張子
　-> パソコン等で扱うファイルの種類を識別するための文字列
ディレクトリ
　-> ファイルを保管できる場所
　-> CUIではディレクトリと呼ばれるが、GUIでは”フォルダ”と呼ばれる。
ルート・ディレクトリ
　-> ディレクトリ階層で一番上にあるディレクトリ
カレント・ディレクトリ
　-> 現在作業しているディレクトリ（今操作している場所）
パス
　-> 目的のファイルがどこのフォルダに保存されているのかを示す道順
絶対パス
　-> ルートディレクトリから目的地（ディレクトリ）までのパス
　-> ユーザがどのディレクトリに居てもパスが変わることはない
相対パス
　-> ユーザが今居るディレクトリから目的地（ディレクトリ）までのパス

■ ネットワーク
LAN
　-> ローカル エリア ネットワーク
　-> 建物内やフロア内といった狭い範囲にあるネットワーク
　-> 一定の範囲内でパソコンからパソコンへファイルを送ったり、１台のパソコンを複数のパソコンで共有したりできる
　-> Wi-Fiとは別物として考える必要があり、システムによっては専用の無線送受信機を使用し接続する
WAN
　-> ワイド エリア ネットワーク
　-> 遠く離れたエリアと繋がったネットワーク（日頃利用しているインターネットもWANを利用している）
クライアント
　-> サービスを利用する人（あるいはコンピュータ）
サーバー
　-> サービスを提供するコンピュータ

■ 各種プロトコル
HTTP
　-> ハイパー テキスト トランスファー プロトコル
　-> トランスポート（送信・転送等）・プロトコルとしてTCPを使用する
　-> HTMLやXMLによって記述されたハイパーテキストの転送を主な目的としている
　※　プロトコル・・コンピュータ同士の通信をする際の手順や規格のこと
TCP
　-> トランスミッション コントロール プロトコル
　-> インターネットを含む多くのコンピュータネットワークにおいて、”標準的に利用されている通信プロトコルのセット”
　-> あらゆるコンピュータやネットワーク機器がTCP（IP）に対応しているため、有線・無線またはOS等が違っても通信ができる
FTP
　-> ファイル トランスファー プロトコル
　-> 手元にある文章や画像データなどを、Webサーバーに転送するための手段
　-> 実際はFTPソフトを利用し、FTPサーバーに接続する。
　　 するとWebサーバーにあるファイル一式が表示され、手元にあるファイルを転送して上書きしたり、新規に転送して追加したりまた削除し、Webサーバーの公開データを更新できる
HTTPS
　-> ハイパー テキスト トランスファー プロトコル セキュアー
　-> HTML等の転送が暗号化される仕組み
SSL
　-> セキュア ソケッツ レイアー
　-> HTTPやFTPなどのプロトコルで行われる通信を暗号化して安全に送受信するためのプロトコル
　-> 意図した接続先かどうかの証明（証明書の確認）、通信内容の暗号化を行う
　-> 現在はTLS（トランスポート レイアー セキュリティ）というSSLの次世代規格が存在している
SSH
　-> セキュア シェル
　-> 暗号化された遠隔ログインシステム
　-> 意図した接続先かどうかの証明、サーバーから見てクライアントが認証できるか、通信内容の暗号化を行う
ポート、ポート番号
　-> 多くのインターネットは「IPアドレス＋ポート番号」で通信を行っている
　-> IPアドレスが「住所・家」、ポートが「ドア」として例えられる
　-> クライアント側のポートはセキュリティ上、通信する度にポート（ポート番号）を変えている（ポート番号に特に意味はない）
　-> サーバー側は常に同じポート（ポート番号）を開放しており、通信内容によって使用するポート番号が異なる
HTTP、FTP、SSHの各ポート番号
　-> HTTP（８０）、FTP（データ：２０、制御：２１）、SSH（２２）
ファイアウォール
　-> インターネットからの不正侵入を防ぐシステムのこと
　-> WinodwsのOSにはじめから付いており、他にもセキュリティ対策ソフトに入っているものや、ルーターが有しているもの等様々である

■ IPアドレス
IPアドレス
　-> インターネット上に接続された機器が持つ番号
　-> ネットワーク上の機器を識別するために使用される
　-> 現在普及しているIPv4は32ビット（桁）の２進数で表されている。
　　（表示される場合は、８ビットごとに「.」で区切り１０進数で表記される）
　　（ちなみに２進数の８ビットで表される最大値は１０進数で表すと”255”であり、”ドラクエのステータス最大値”や”ポケモンの努力値”でお馴染みの値となる）
グローバルIPアドレス
　-> インターネットに接続する際に使用するIPアドレスであり、２種類存在する
　-> 動的IPアドレス・・ISP（インターネットサービズプロバイダ）に接続すると、その都度別のIPアドレスを割り振られる
　-> 静的IPアドレス・・Webの公開サーバーやメールの送受信等、都度変わると好ましくない際に導入される固定されたIPアドレス
　　　（実はISPは静的IPアドレスを所有していないので、この問題を回避するにはテクニックがあるらしい。。）
プライベートIPアドレス
　-> 家庭内等独立したのネットワークにあるパソコンなどに付与されているIPアドレス（元々付されている）

■ ドメイン
ドメイン
　-> インターネット上の「住所」（URLやメールアドレスで〇〇.comで表される）
　-> 独自ドメイン・・ユーザーが独自で名前を決めて利用できるドメイン（例:@sasaki.com）
　-> サブドメイン・・独自ドメインをさらに分割して複数のユーザに割り振るためのドメイン（例:@aaa.sasaki.com,bbb.sasaki.com）
　-> トップレベルドメイン・・「.」で区切られた最も右側の部分
DNS
　-> ドメインネームシステム
　-> インターネット上で ドメイン名 を管理・運用するために開発されたシステム
　-> 実際にインターネット上で通信が行われる際は、IPアドレスが用いられるが、そのIPアドレスに対応するドメイン名の情報を保持、検索するためのシステム
VPN
　-> バーチャル プライベート ネットワーク
　-> インターネット上に仮想的な専用線を設け、セキュリティ上の安全な経路を使ってデータをやり取りする仕組み
　-> 専用線を引くことに比べ、物理的な制約を受けず、低コストで専用線に近いセキュリティを実現し、擬似的なLANを構築できる
　-> 無料Wi-Fiなどの回線を暗号化して利用できる（スマートフォンでVPNを利用するためのアプリもリリースされている）
ブリッジ
　-> ネットワークの中継機機であり、MACアドレスを参考にデータの行先を振り分ける役割を持っている
　※　MACアドレス・・ネットワーク機器に当てられた住所（コンピュータに当てられた住所がIPアドレス）
　　つまり、データの送信は、、　IP->MAC->MAC->MAC->IP　のような形で行われている。
  -> 行先がMACアドレスの場合・・ブリッジが行先を振り分け
  -> 行先がIPアドレスの場合・・ルータが行先を振り分け
  ※　ブリッジもルータもネットワーク機器であるため、MACアドレスが付されている
プロキシサーバー
　-> 内部ネットワークからインターネットへの通信を中継する役割を持っている
　-> プロキシを通してサイトへアクセスすることで、ログが残るため、サイバー攻撃された際もログの解析が可能
　-> プロキシ上でウイルスチェックが可能であるため、安全性が向上する上、会社単位だと管理が楽になる
　-> キャッシュも保存してくれるため、ネットワークサーバーへの負荷を分散させることも可能
　-> プロキシサーバーを攻撃されると、ログやキャッシュ、個人情報を抜き取られる可能性もある

■ 電子メール
SMTP
　-> シンプル メール トランスファー プロトコル
　-> メール送信時、（依頼された）SMTPサーバーが”メール”を（相手のアドレスを管理している）SMTPサーバーまで届ける仕組み
POP
　-> ポスト オフィス プロトコル
　-> POPサーバーが自動的にメールサーバーにアクセスし、メールをダウンロードしてくる（技術）
IMAP
　-> インターネット メッセージ アクセス プロトコル
　-> IMAPサーバーを通じ、メールサーバーにアクセスし、メールを閲覧することができる
　-> POPと異なり、ダウンロードしないのでコンピュータに容量が蓄積しない（最近のGmail等　はこの仕組みを採用）

■ セッションとクッキー
セッション
　-> あるWebページへの通信の開始から終了（サイトから出る・ブラウザを閉じる・一定時間が経過）までを指す
　-> セッション中はユーザー情報（登録情報、ログイン状況、カート 等）がそのページ内で保持される
　-> セッションIDをクッキーに保存することで、再度同じページを訪れた際、以前のセッション情報を読み込む事ができる
クッキー
　-> 特定のページを訪問した履歴や入力情報等をブラウザに保存する仕組み
　-> あるWebページにアクセスすると、WebサーバーからクッキーIDを振られ、クライアントのブラウザに保存される
　-> 再度Webページにアクセスすると、ブラウザからWebサーバーへクッキーIDが送信され、それを元にWebサーバーが履歴や登録情報を呼び出してくれる
キャッシュ
　-> 何度も閲覧するWebページを２回目以降、表示スピードを高速化するための技術
　-> ページ内の画像やアイコンを一定期間パソコンに保存し、それを読み込む事で実現している
　-> キャッシュを溜め込むとパソコンの動作が重くなる

■ DB（データベース）について
インデックス
　-> テーブルのデータを、ソートし保存することで検索（呼び出し）を効率化する仕組み
　-> テーブルにデータが保存される際、データを複製し、ソートし保存するため、書き込み速度が低下する

■ テストについて
フロー
　-> １.単体テスト　　　　・・作成したプログラムを一つずつ単体でテストして正常に動作するかを検証
　-> ２.統合（結合）テスト・・単体テストで確認した複数のモジュールを組み合わせて不具合がないか、連結がうまくいくかを検証
　-> ３.システムテスト　　・・すべてのプログラムとハードウェアを合わせたシステム全体のテスト

■ チケット管理ツール
タスク
　-> タスクを「チケット」として管理する開発手法
　-> タスクの進捗が把握しやすい一方、タスクの優先度や関連性を明らかにしづらい

■ バージョン管理
Git
　-> プログラムソースなどの変更履歴を管理する分散型のバージョン管理システム
　-> ローカル環境に変更履歴を含むレポジトリを複製することが可能であり、リモートのサーバーに常に接続する必要がありません
SVN
　-> サブ バージョン システム
　-> コミットを行うとSVNサーバーに送られ、メンバー全員に共有されてしまう（コミットの取り消しも不可能）
    （恐らく、ブランチの概念がなく、gitで例えると、masterブランチで作業する感覚なんだろうと思う）
デグレ
　-> デグレート
　-> 新しいバージョンのソフトウェアの品質が以前より悪くなる事（以前修正したバグや不具合が再発することもある）
マージツール
　-> 複数のファイルを結合（マージ）・同期するツールのこと
　-> Araxis Mergeが人気のようだ