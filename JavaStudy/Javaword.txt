■ 開発
　ウォーターフォール開発
　　→開発手順を1つずつ確認しながら工程を進めていく手法。SIerでよく使われる。
　　→開発を各工程に分けて進めるため、次のフェーズに進むと後戻りができない。
　　（例：機能A、機能B、機能Cの企画　→機能A、機能B、機能Cの設計　→機能A、機能B、機能Cの開発　→機能A、機能B、機能Cのテスト）
　　→スケジュールや予算を立てやすく、品質も高い（確実なもの）を作れるメリットがある反面、時間がかかる上、途中で路線変更が難しい。
　アジャイル開発
　　→開発を出来る限り早くリリースしようという考え方に基づいた考え方。
　　→必要最低限の機能でリリースし、運用しながら機能を増やしたりするパターンがよくある。
　　→毎日ミーティングを行い、チームないでスムーズに連携をとる「スクラム」という手法が主に用いられる。
　　→開発を小さな単位に分け、「設計→開発→テスト」のサイクルを何度も繰り返す。
　マイグレーション
　　→ソフトウェアやシステム、データ等を別の環境に移転したり、新しい環境に切り替えたりすることを意味する。
　　→手作業ではミスが発生する可能性が高く、専用のツールを使用することが多い。
　デグレーション
　　→「悪化・退化」を意味する言葉。
　　→プログラムの不具合を修正した際に新たに不具合が発生し。品質や機能が改悪されること。
　デプロイ
　　→作成したソフトフェアを実際の運用環境（本番環境）に配置し、実用に供すること。
　コンフリクト
　　→複数のプログラム等が同じ資源（データ等）を同時に利用しようとして競合状態になること。
　環境
　・開発環境（ローカル）
　　→自分のパソコン上に作る仮装のサーバー
　　→よし、完成！と思ったら、Web上（本番環境）に上げるとよい。
　・検証環境（ステージング）
　　→ステージング環境とも呼び、本番環境に近い『最終テスト』に用いる本番環境と類似のテスト環境。
　　→デプロイ作業のシミュレーション、環境設定やデータの違いによる検証漏れの洗い出し、本番同等のユーザ体験の確認　等
　・本番環境
　　→開発したシステム（ソフトウェア）が製品として実際に稼働している環境
　設計書／仕様書
　・要件定義
　　→クライアントの要望と、その要望をどのように叶えるかを文章としてまとめたもの。
　・基本設計書
　　→ソフトウェアの動きを外から見た際にどういう動きをするのかを決めたもの。（what）
　　→業務フロー、機能一覧、ネットワーク構成図、ER図、画面レイアウト　等
　　→クライアントに見せるもの
　・詳細設計書
　　→基本設計で決められた動きをどうやって実現するかを決めたもの。（How）
　　→機能設計書、データベース物理設計書　等
　　→クライアントに見せず、車内開発者のみで共有することが多い。
　テスト
　　→コンピュータのプログラムから仕様にない振舞または欠陥（バグ）を見つけ出す作業。
　　→バグを修正する作業をデバッグという。
　・単体テスト（UT）
　　→プログラムを構成する個々の機能が正しく動作するか検証するためのテスト。
　・結合テスト（CT／IT）
　　→プログラムを構成する個々の機能を結合させて、うまく連携・動作しているか検証するためのテスト。
　・総合テスト（ST）
　　→構築したシステムが全体で予定通りの機能を満たしているか、また仕様書どおり出来ているのか検証するためのテスト。
　　→ステージング環境で実施することが多い。
　エビデンス／証跡
　　→システム開発において正しく動作したこと、又は不具合が生じたことを示す根拠となる書類やデータ。
　データパッチ
　　→ソフトウェアに変更を加えるために用意された後付けのプログラムのこと。
　　→「修正プログラム」や「アップデート」などと呼ばれることもある。
　Access
　　→マイクロソフト製のデータベース管理ソフト。
　　→SQLを使うものであり、直感的にデータ操作が可能であり、初心者にも易しい。
　マクロ
　　→複数の操作をまとめて必要に応じて呼び出せるようにする機能。
　　→マイクロソフトのExcel、Word、Accessの他にもアドビのIllustratorやPhotoshop等で使われる。
　・VBA
　　→マクロ機能を構成するプログラミング言語
　GAS（Google Apps Script）
　　→グーグルのツールやサービスを連携して利用するためのプログラミング言語。
　　→スクリプト言語。
　　→グーグルアカウントとインターネット環境があれば使用が可能であり、環境構築の必要もない。
　API
　　→自己のソフトウェアを一部公開して他のソフトウェアと機能を共有できるようにしたもの。
　・WEB API
　　→APIはWeｂ上で通信して利用することが普通なので、WebAPIと呼ばれることが多い。
　・REST API
　　→以下の４つの設計原則に基づき、開発されたAPI。
　　　→アドレスの可読性、ステートレス性、接続性、統一インターフェース
　　　○HTTPリクエストに対し、JSON形式やXML形式といった、データのみを返すので通信が早く、データの加工も自由度が高い。
　　　○セッションを用いた通信を行わないため、状況が異なる場面で通信しても同じ情報を返す。
　・SOAP
　　→Simple Object Access Protocol
　　→異なるコンピュータ上で動作するプログラム同士がネットワークを通じてメッセージを伝え合い、連携して動作するための通信プロトコルの一つ。
　　→メッセージの記述はXML。データ転送はHTTP。
　Ajax
　　→Asynchronous JavaScript + XML
　　→非同期通信。JavaScriptとXMLを使って非同期にサーバとの間の通信を行うこと。
　　→一部の情報のみをサーバーに送信して、それを受け取り反映させる仕組み。
　・XML
　　→マークアップ言語のひとつ。
　　→HTMLと異なり、「タグ」を自由に設定可能であり、非常に高い柔軟性を持ちながら、データに意味を持たせることが可能。
　・JSON
　　→XMLなどと同様のテキストベースのデータフォーマット。
　　→人間にとって読み書きが容易であるうえ、マシンにとっても簡単にパースや生成を行える形式。
　　→JavaScriptの一部をベースに作られているが、完全に言語から独立したテキストである。
　・ステータスコード
　　→特定の HTTP リクエストが正常に完了したどうかを示すコード。
　　→例：２００：通信成功、４０４：リクエストされたリソースが発見できない、５００：サーバー側で処理ができない　等
　・クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）
　　→オリジンとは…protocol + domain + portNumber
　　　○　ドメイン：yahoo.co.jp
　　　○　オリジン：http://yahoo.co.jp:442
　　→オリジン間リソース共有
　　→「あるオリジンで動いているWeb」に対して「別のオリジンのサーバー」へのアクセスを「オリジン間HTTPリクエスト」によって許可できる仕組み。
　　→通常、オリジン間のリソース共有はセキュリティ上問題があるが、それを可能にする技術がCORS。
　バリデーション
　　→対象がその仕様や文法などに照らして適切に記述・構築されているか否かを検証する仕組み。
　データ連携
　　→異なるアプリケーションやシステムを跨いでデータを共有、活用するためのプロセス。
　・Daemon
　　→Unix系OS（UNIX、Linux、Mac等）において動作するプログラムで、主にバックグラウンドで動作するプロセス。
　・CRON
　　→デーモンの一種。
　　→利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの。
　・バッチ
　　→直訳で「一回文にまとめる」という意味。
　　→あらかじめ登録した一連の処理を自動的に実行する処理方式。
　・ログ
　　→コンピュータの利用状況やデータ通信などの「履歴」や「情報の記録」のこと。
　・CSV
　　→comma separated values
　　→値や項目をカンマで区切って書いたテキストファイル。
　・TSV
　　→値や項目をタブで区切って書いたテキストファイル。
　プルリクエスト（マージリクエスト）
　　→githubにおいてコードの変更をレビュワーに通知し、マージを依頼する機能。

■ チケット管理ツール
　asana
　　→料金・機能面共に平均的なタスク管理ツール。
　　→管理ツールに慣れていない人でもすぐに慣れるよう、UIが作り込まれている。
　Backlog
　　→タスクをグラフ化して分析する機能がある。
　Jooto
　　→仕事や作業を入力した付箋のようなタスクカードをドラッグ&ドロップで動かし、ポストイット感覚でタスクを管理できる。
　Readmine
　　→タスク情報をリアルタイムで共有でき、情報が一箇所のデータベースで集中管理されているので整理しやすい。
　　→非エンジニアだと、使い方に慣れるまでに時間がかかってしまう。
　Trello
　　→世界で最も使われている管理ツール。
　　→無料で全ての機能が使用できること、ボード内の人数に制限がないことが人気の理由。

■ バージョン管理
　集中型
　　→複数の作業者が同じファイル群を扱うもの。
　　→サーバ内にあるファイル群をリポジトリと呼び、誰でもその内容をコピーしたり、変更を反映（コミット）させたりできる。
　　→オフラインの状況下ではファイルをリポジトリに取得・反映できない。
　分散型
　　→主となるサーバーが無いので各々が独立したリポジトリを持ち、他のリポジトリと同期することができる。
　Github
　　→ソースコード管理サービス。
　　→公開されているソースコードの閲覧や簡単なバグ管理機能、SNS機能を備えている。また、バージョン管理もできる。
　Backlog
　　→シンプルで分かりやすいUI。
　　→チームのタスク管理と情報共有にフォーカスしており、機能がシンプル。
　SourceTree
　　→Gitのクライアントソフト。
　　→GUIの操作により、Gitコマンドを実行してくれる。
　Tortoise SVN
　　→バージョン管理システムであるSubversionのクライアントでWindowsのシェルエクステンションとして機能する。
　　→Subversionのコマンドを実行する必要がなく、直感的に操作が可能。
　Git Flow
　　→Gitの機能であるブランチを活用したGitの開発手法。
　・master
　　→リリースしたデータを置いておくブランチ。
　・release
　　→リリース前に準備、微調整をおこなうブランチ。
　・develop
　　→開発をおこなうためのブランチ。
　・feature
　　→開発をおこなうためのブランチで、個々の機能の実装やバグの解決をおこなう。

■ FW／ライブラリ
　FW
　　→フレームワーク
　　→アプリケーションを開発するとき、その土台として機能させるソフトフェア。
　　→アプリケーションをゼロから開発する必要がないので、工程を大幅に短縮できる。
　・Spring Framework
　　→Javaのフレームワーク
　　→変更に強く（DI:依存性の注入）、またコードの保守性（AOP：アスペクト指向プログラミング）・再利用性が高いのが特徴。
　・Struts
　　→Javaのフレームワーク
　　→2005年頃にはJavaのフレームワークではスタンダードと呼ばれる普及を見せたが、ソフトウェアの進歩と共に欠点が多く指摘されるようになり、2007年にはstruts2がリリースされた。
　　→struts2のセキュリティホールが攻撃対象になることが度々あり、国内でも今まで多数の被害を出してきた。
　・JSF（Java Server Faces）
　　→Javaのフレームワーク
　　→JavaEEに採用されている。
　ライブラリ
　　→ある特定の機能を持ったコンピュータプログラムを他のプログラムから呼び出して利用できるように部品化し、一つのファイルに収納したもの。
　・Bootstrap
　　→Twitter社が開発したWebサイトやWebページを効率よく開発するためのフレームワーク。
　　→CSSやJavaScripで「ボタン」や「フォーム」等の雛形が既に作成されており、それらの定義を呼び出すだけで使用することができる。
　・Flyway
　　→DBマイグレーションツール。
　　→DB環境をバージョン管理し、DB移行を簡単にしてくれるツール。
　・Jackson
　　→Java用のJSONパーサライブラリ。
　　→パーサとは、XML文書など（今回はJSON）、何らかの言語で記述された構造的な文字データを解析し、プログラムで扱えるようなデータ構造の集合体に変換するプログラムのこと。
　・jQuery
　　→JavaScriptのライブラリ。
　　→JavaScriptの開発を簡単にする他、ブラウザの違いを意識せずにコーディングが出来たり、Ajax処理が簡単にできたり等のメリットがある。
　・Junit
　　→Javaで開発されたプログラムにおいて単体テストの自動化を行うためのフレームワーク。
　・Log4j
　　→Javaのプログラムにおけるログ出力実装ライブラリ（ロガー）。
　・Lombok
　　→自動でアノテーションによるコードを自動生成してくれるライブラリ。
　・ORM
　　→Object/Relational Mapping
　　→オブジェクト指向とリレーショナルデータベースにおけるレコードを対象させる仕組みのこと。
　　→SQLを書かなくて良いので、可読性が上がる一方、自由度が下がるデメリットもある。

■ 連絡ツール
　ChatWork
　　→ビジネスチャットツール。
　　→メッセージのやりとりだけでなく、タスク管理やファイル共有、ビデオ通話が可能。
　Slack
　　→ビジネスチャットツール。
　　→ChatWorkと異なり、タスク管理は出来ないが、外部サービスとの連携やプログラミングしたコードの共有が可能であり、エンジニア向き。
　IP Messenger
　　→LAN用のメッセンジャーソフト。
　　→同一ネットワーク環境が構築されていればネットに接続しなくても利用でき、情報漏洩に強い。

■ Java
　Javadoc
　　→Javaに書き込めるコメントのこと。
　　→Javaは「/** ~ */」でコメントを書けるが、この中で、「＠」から書かれた文字列がJavadoc。
　アノテーション
　　→「＠」のこと。＠から始まり、コードでは表現しきれない情報を補足として付け加えられる。
　　→開発者の名前やバージョン等を記載することが多い。また、他にもよく使われるアノテーションのパターンがあるらしい。
　メモリ管理
　・ヒープ
　　→JVM（Java Virtual Machine）上でユーザが作ったプログラムが利用するメモリ領域。
　　→ヒープは大きく、New（新規に作成された、または短命なオブジェクトが格納される）,Old（寿命が長いオブジェクトが格納される）,Permanent（クラスやメソッドの情報が格納される）に分かれる。
　・GC
　　→ガベージコレクション
　　→プログラムの処理後、不要となった情報（＝メモリに残ったゴミ）を自動で削除（＝開放）してくれる機能。
　GoF
　　→Gang of Four
　　→オブジェクト指向による設計（デザインパターン）の基本23パターンをまとめたもの。あるいはデザインパターンを作成した４人組を指す。
　デザインパターン
　　→オブジェクト指向で開発を行うにあたり、再利用性の高いクラスやライブラリが重要になる。これに対する指針(Gof）のこと。

■ その他
　オブジェクト指向
　　→モノ（オブジェクト）に振る舞い（メソッド）を与えるプログラミングの考え方。
　　→オブジェクトとは、クラスから生成されたインスタンスのこと。
　　→コードの書き換えが容易であり、プログラミングの認識も共有しやすい一方、コードが几帳になりがちなので、再利用しやすいコードの記述がマストとなる。
　バッチ処理
　　→バッチ：直訳すると「一回文にまとめる」。
　　→あらかじめ登録しておいた一連の処理を自動的に処理する方式。
　コンパイル
　　→プログラミング言語で記述されたのソースコードをコンピュータが実行可能な形式に変換する作業のこと。
　カバレッジ
　　→カバーしている範囲のこと。
　　→テストカバレッジとなると、テスト全体に対する確認（カバー）済みの範囲のこと。
　プラットホーム
　　→ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス等の動作環境のこと。